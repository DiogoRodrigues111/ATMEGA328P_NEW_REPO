
Breadboard_LED_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b2  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <make_delay_ms>:
#define DDRB0_ADDR				0x04
#define ENTRY_DDRB0_FLAGS(P)	ENTRY_FLAGS((P) +SFR_DDRB0)
#define PUT_SFR_DDRB0			ENTRY_DDRB0_FLAGS(DDRB0_ADDR)
#define DDRB0_SUCCESS			PUT_SFR_DDRB0

void make_delay_ms(unsigned long ms) {
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	8b 01       	movw	r16, r22
  86:	9c 01       	movw	r18, r24
	unsigned int a=0,b=0;
	for(a=0;  a<65000; a++)
  88:	e0 e0       	ldi	r30, 0x00	; 0
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <make_delay_ms+0x28>
		for(b=0; b<ms; b++)
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	02 c0       	rjmp	.+4      	; 0x96 <make_delay_ms+0x16>
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	ac 01       	movw	r20, r24
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	40 17       	cp	r20, r16
  9e:	51 07       	cpc	r21, r17
  a0:	62 07       	cpc	r22, r18
  a2:	73 07       	cpc	r23, r19
  a4:	a0 f3       	brcs	.-24     	; 0x8e <make_delay_ms+0xe>
#define PUT_SFR_DDRB0			ENTRY_DDRB0_FLAGS(DDRB0_ADDR)
#define DDRB0_SUCCESS			PUT_SFR_DDRB0

void make_delay_ms(unsigned long ms) {
	unsigned int a=0,b=0;
	for(a=0;  a<65000; a++)
  a6:	31 96       	adiw	r30, 0x01	; 1
  a8:	e8 3e       	cpi	r30, 0xE8	; 232
  aa:	8d ef       	ldi	r24, 0xFD	; 253
  ac:	f8 07       	cpc	r31, r24
  ae:	88 f3       	brcs	.-30     	; 0x92 <make_delay_ms+0x12>
		for(b=0; b<ms; b++)
			;
}
  b0:	1f 91       	pop	r17
  b2:	0f 91       	pop	r16
  b4:	08 95       	ret

000000b6 <main>:

int main(void)
{
	DDRB0_SUCCESS = 0;
  b6:	14 b8       	out	0x04, r1	; 4
	
	if(DDRB0_SUCCESS >= 0)
  b8:	84 b1       	in	r24, 0x04	; 4
		DDRB0_SUCCESS = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	84 b9       	out	0x04, r24	; 4
	
    while(1) 
    {
		if(PORTB0_SUCCESS >= 0) {
  be:	85 b1       	in	r24, 0x05	; 5
			PORTB0_SUCCESS = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	85 b9       	out	0x05, r24	; 5
			make_delay_ms(500);
  c4:	64 ef       	ldi	r22, 0xF4	; 244
  c6:	71 e0       	ldi	r23, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 40 00 	call	0x80	; 0x80 <make_delay_ms>
  d0:	f6 cf       	rjmp	.-20     	; 0xbe <main+0x8>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
